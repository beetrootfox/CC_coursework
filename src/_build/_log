### Starting build.
# Target: test.ml.depends, tags: { extension:ml, file:test.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules test.ml > test.ml.depends # cached
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o ast.cmo ast.ml # cached
# Target: compiler.ml.depends, tags: { extension:ml, file:compiler.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules compiler.ml > compiler.ml.depends # cached
# Target: evaluator.ml.depends, tags: { extension:ml, file:evaluator.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules evaluator.ml > evaluator.ml.depends # cached
# Target: evaluator.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:evaluator.cmo, file:evaluator.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o evaluator.cmo evaluator.ml # cached
# Target: compiler.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:compiler.cmo, file:compiler.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o compiler.cmo compiler.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o lexer.cmo lexer.ml # cached
# Target: optimizer.ml.depends, tags: { extension:ml, file:optimizer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules optimizer.ml > optimizer.ml.depends # cached
# Target: optimizer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:optimizer.cmo, file:optimizer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o optimizer.cmo optimizer.ml # cached
# Target: x86_compiler.ml.depends, tags: { extension:ml, file:x86_compiler.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules x86_compiler.ml > x86_compiler.ml.depends # cached
# Target: x86_compiler.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:x86_compiler.cmo, file:x86_compiler.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o x86_compiler.cmo x86_compiler.ml # cached
# Target: test.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o test.cmo test.ml # cached
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o ast.cmx ast.ml # cached
# Target: evaluator.cmx, tags: { compile, extension:cmx, extension:ml, file:evaluator.cmx, file:evaluator.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o evaluator.cmx evaluator.ml # cached
# Target: compiler.cmx, tags: { compile, extension:cmx, extension:ml, file:compiler.cmx, file:compiler.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o compiler.cmx compiler.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o lexer.cmx lexer.ml # cached
# Target: optimizer.cmx, tags: { compile, extension:cmx, extension:ml, file:optimizer.cmx, file:optimizer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o optimizer.cmx optimizer.ml # cached
# Target: x86_compiler.cmx, tags: { compile, extension:cmx, extension:ml, file:x86_compiler.cmx, file:x86_compiler.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o x86_compiler.cmx x86_compiler.ml # cached
# Target: test.cmx, tags: { compile, extension:cmx, extension:ml, file:test.cmx, file:test.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o test.cmx test.ml # cached
# Target: test.native, tags: { dont_link_with, extension:native, file:test.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg ast.cmx evaluator.cmx compiler.cmx parser.cmx lexer.cmx optimizer.cmx x86_compiler.cmx test.cmx -o test.native # cached
# Compilation successful.
